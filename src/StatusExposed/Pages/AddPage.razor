@page "/add/{*autoFillDomain}"

@using System.Text.RegularExpressions
@using StatusExposed.Services
@using StatusExposed.Utilities

@inject NavigationManager NavigationManger
@inject IStatusService StatusService

<HeadContent>
    <meta name="description" content="Add a site to track">

    <!-- Facebook Meta Tags -->
    <meta property="og:url" content="https://status.exposed/add">
    <meta property="og:type" content="website">
    <meta property="og:title" content="Add site to StatusExposed">
    <meta property="og:description" content="Add a site to track">

    <!-- Twitter Meta Tags -->
    <meta name="twitter:card" content="summary">
    <meta property="twitter:domain" content="status.exposed">
    <meta property="twitter:url" content="https://status.exposed/add">
    <meta name="twitter:title" content="Add site to StatusExposed">
    <meta name="twitter:description" content="Add a site to track">
</HeadContent>

<div class="control-section centerArea">
    <div class="text-center">

        <Validations StatusChanged="ValidationStatusChanged">
            <Validation Validator="CustomValidators.ValidateDomain">
                <Field>
                    <FieldLabel>Website domain</FieldLabel>
                    <TextEdit Placeholder="example.com" @bind-Text="domainText" Disabled="isLoading" Autofocus="true">
                        <Feedback>
                            <ValidationNone>Enter a domain.</ValidationNone>
                            <ValidationSuccess>Domain is valid.</ValidationSuccess>
                            <ValidationError>Enter a valid domain!</ValidationError>
                        </Feedback>
                    </TextEdit>
                </Field>
            </Validation>

            <Validation Validator="CustomValidators.ValidateUrl">
                <Field>
                    <FieldLabel>Official status page (Optional)</FieldLabel>
                    <TextEdit Placeholder="https://status.example.com" @bind-Text="statusPageUrlText" Disabled="isLoading">
                        <Feedback>
                            <ValidationNone>Enter a URL.</ValidationNone>
                            <ValidationSuccess>URL is valid.</ValidationSuccess>
                            <ValidationError>Enter a valid URL!</ValidationError>
                        </Feedback>
                    </TextEdit>
                </Field>
            </Validation>

            <Button Color="Color.Primary" Clicked="@Submit" Disabled="!isValid || isLoading" Loading="@isLoading">Submit</Button>
        </Validations>
    </div>
</div>

@code {
    [Parameter]
    public string? AutoFillDomain { get; set; }

    private bool isValid;
    private bool isLoading;

    private string? domainText;
    private string? statusPageUrlText;

    protected override void OnParametersSet()
    {
        domainText = AutoFillDomain?.Replace('/', '.');
    }

    private async Task Submit()
    {
        if (domainText is null || !isValid)
        {
            return;
        }

        isLoading = true;
        await StatusService.AddServiceAsync(domainText, statusPageUrlText);
        NavigationManger.NavigateTo($"status/{domainText.Replace('.', '/')}");
    }

    private void ValidationStatusChanged(ValidationsStatusChangedEventArgs e)
    {
        isValid = e.Status != ValidationStatus.Error;
    }
}
