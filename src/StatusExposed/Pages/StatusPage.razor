@page "/status/{*ServicePageDomain}"
@page "/s/{*ServicePageDomain}"
@using StatusExposed.Models
@using StatusExposed.Services

@inject NavigationManager NavigationManger
@inject IStatusService StatusService

<PageTitle>@PlainStatusString</PageTitle>

<HeadContent>
    <!-- HTML Meta Tags -->
    <meta name="description" content="@PlainStatusString">
    <meta name="theme-color" content="@ThemeColor">

    <!-- Facebook Meta Tags -->
    <meta property="og:url" content="https://status.exposed/status/@EscapedServicePageDomain">
    <meta property="og:type" content="website">
    <meta property="og:title" content="@PlainStatusString">
    <meta property="og:description" content="@PlainInfoString">

    <!-- Twitter Meta Tags -->
    <meta name="twitter:card" content="summary">
    <meta property="twitter:domain" content="status.exposed">
    <meta property="twitter:url" content="https://status.exposed/status/@EscapedServicePageDomain">
    <meta name="twitter:title" content="@PlainStatusString">
    <meta name="twitter:description" content="@PlainInfoString">
</HeadContent>

<div class="control-section centerArea">
    <div class="text-center w-100">
        @if (doesExist)
        {
            @if (string.IsNullOrWhiteSpace(statusInformation?.StatusPageUrl))
            {
                <span class="h1"><strong class="text-break">@ServicePageDomain</strong> is currently <strong>@(statusInformation?.CurrentStatus.Status ?? Status.Unknown)</strong></span>
            }
            else
            {
                <a href="@statusInformation?.StatusPageUrl" style="all: unset; cursor: pointer;">
                    <span class="h1"><strong class="text-break">@ServicePageDomain</strong> is currently <strong>@(statusInformation?.CurrentStatus.Status ?? Status.Unknown)</strong></span>
                </a>
            }
            <br />
            <br />
            <Span TextColor="TextColor.Muted" Display="Display.InlineFlex" VerticalAlignment="VerticalAlignment.Middle">
                Response time:
                @if (statusInformation?.CurrentStatus.ResponseTime == TimeSpan.MaxValue || statusInformation is null)
                {
                    <span class="oi oi-infinity mt-1 ml-1" aria-hidden="true" />
                }
                else
                {
                    <span class="ml-1">@statusInformation?.CurrentStatus.FormatedResponseTimeTime</span>
                }
            </Span>
            <br />

            if (statusInformation is null)
            {
                <Span TextColor="TextColor.Muted">Updating...</Span>
            }
            else
            {
                <Span TextColor="TextColor.Muted">Updated @statusInformation?.CurrentStatus.FormatedUpdateTime ago</Span>
            }

            <div style="height: 350px; width: 700px" class="d-none d-lg-block m-auto">
                <br/>
                <br/>
                @if (statusInformation is not null)
                {
                    <StatusChart StatusInformation="statusInformation" />
                }
            </div>
        }
        else
        {
            <span class="h1"><strong>@ServicePageDomain</strong> is not tracked</span>
            <br />
            <br />
            <a href="add/@EscapedServicePageDomain" class="btn btn-link">Add it now</a>
        }
    </div>
</div>


<!-- Use when implementing management system
<div style=" position: fixed; bottom: 0; right: 0;">
@if (reported)
{
        <Tooltip Text="Successfully reported site">
            <Button Color="Color.Link" Class="shadow-none" Disabled="true"><span class="oi oi-circle-check m-4 text-success" aria-hidden="true" /></Button>
        </Tooltip>
}
else
{
        <Tooltip Text="Report site" @onclick="(e)=>reported = true" style="cursor: pointer;">
            <Button Color="Color.Link" Class="shadow-none zoom"><span class="oi oi-flag m-4 text-danger" aria-hidden="true" /></Button>
        </Tooltip>
}
</div>
-->
@code {
    [Parameter]
    public string? ServicePageDomain { get; set; }

    private string? EscapedServicePageDomain => ServicePageDomain?.Replace('.', '/');
    private string PlainStatusString => $"{ServicePageDomain} is currently {(statusInformation?.CurrentStatus.Status ?? Status.Unknown)}";
    private string PlainInfoString => $"Response time: {(statusInformation is null ? "infinite" : statusInformation.CurrentStatus.FormatedResponseTimeTime)} | "
                                    + $"{(statusInformation is null || statusInformation?.CurrentStatus.ResponseTime == TimeSpan.MaxValue ? "Updating..." : ($"Updated {statusInformation?.CurrentStatus.FormatedUpdateTime} ago"))}";

    private string ThemeColor
    {
        get
        {
            return statusInformation?.CurrentStatus.Status switch
            {
                Status.Up => "#00ff00",
                Status.Down => "#ff0000",
                _ => "#ffff00"
            };
        }
    }

    private ServiceInformation? statusInformation = null;

    private bool doesExist = true;

    // Use when implementing management system
    // private bool reported = false;

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrWhiteSpace(ServicePageDomain))
        {
            NavigationManger.NavigateTo("/");
            return;
        }

        ServicePageDomain = ServicePageDomain.Replace('/', '.');

        ServiceInformation? statusInformation = await StatusService.GetStatusAsync(ServicePageDomain);

        if (statusInformation is null)
        {
            doesExist = false;
            return;
        }

        this.statusInformation = statusInformation;
    }
}