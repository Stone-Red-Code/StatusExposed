@page "/check"

@using System.Text.RegularExpressions
@using StatusExposed.Services

@inject NavigationManager NavigationManger
@inject IStatusService StatusService

<HeadContent>
    <meta name="description" content="Check the status of a site">

    <!-- Facebook Meta Tags -->
    <meta property="og:url" content="https://status.exposed/add">
    <meta property="og:type" content="website">
    <meta property="og:title" content="Check the status of a site with StatusExposed">
    <meta property="og:description" content="Check the status of a site">

    <!-- Twitter Meta Tags -->
    <meta name="twitter:card" content="summary">
    <meta property="twitter:domain" content="status.exposed">
    <meta property="twitter:url" content="https://status.exposed/add">
    <meta name="twitter:title" content="Check the status of a site with StatusExposed">
    <meta name="twitter:description" content="Check the status of a site">
</HeadContent>

<div class="control-section centerArea">
    <div class="text-center">
        <Validations StatusChanged="ValidationStatusChanged">
            <Validation Validator="ValidateDomain">
                <Field>
                    <FieldLabel>Website domain</FieldLabel>
                    <TextEdit Placeholder="example.com" @bind-Text="domainText" KeyDown="Enter" Autofocus="true">
                        <Feedback>
                            <ValidationNone>Enter a domain.</ValidationNone>
                            <ValidationSuccess>Domain is valid.</ValidationSuccess>
                            <ValidationError>Enter a valid domain!</ValidationError>
                        </Feedback>
                    </TextEdit>
                </Field>
            </Validation>
            <Button Color="Color.Primary" Clicked="@Submit" Disabled="!isValid || isLoading" Loading="@isLoading">Check</Button>
        </Validations>
    </div>
</div>

@code {
    private bool isValid;
    private bool isLoading;

    private string? domainText;

    private void Submit()
    {
        if (domainText is null || !isValid)
        {
            return;
        }

        isLoading = true;
        NavigationManger.NavigateTo($"/status/{domainText.Replace('.', '/')}");
    }

    private void ValidationStatusChanged(ValidationsStatusChangedEventArgs e)
    {
        isValid = e.Status != ValidationStatus.Error;
    }

    private void ValidateDomain(ValidatorEventArgs e)
    {
        string? domain = e.Value?.ToString();

        if (string.IsNullOrEmpty(domain))
        {
            e.Status = ValidationStatus.Error;
            return;
        }

        if (Regex.IsMatch(domain, @"(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]"))
        {
            e.Status = ValidationStatus.Success;
            return;
        }

        e.Status = ValidationStatus.Error;
    }

    public void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            Submit();
        }
    }
}
