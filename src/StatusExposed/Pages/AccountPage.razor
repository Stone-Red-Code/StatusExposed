@page "/account"
@using StatusExposed.Models
@using StatusExposed.Services
@using StatusExposed.Utilities
@using System.Diagnostics

@inject IAuthenticationService AuthenticationService
@inject IUserDataService UserDataService
@inject IMessageService MessageService
@inject IClipboardService ClipboardService

<Protected>
    <Authorized>
        @if (user is not null)
        {
            <h3 class="mb-5 text-break">Hello, @user.Email</h3>

            <Div>
                <Row Margin="Margin.Is0.FromStart">
                    <Validations StatusChanged="ValidationStatusChanged">
                        <Validation @ref="validation" Validator="CustomValidators.ValidateDomain">
                            <Field Margin="Margin.Is3.OnX.FromEnd">
                                <FieldLabel Class="h5">Subscribe to a site</FieldLabel>
                                <TextEdit Placeholder="example.com" Width="Width.Is100" @bind-Text="domainText" KeyDown="Enter" Disabled="serviceAddIsLoading" Autofocus="true">
                                    <Feedback>
                                        <ValidationNone>Enter a domain.</ValidationNone>
                                        <ValidationSuccess>Domain is valid.</ValidationSuccess>
                                        <ValidationError>Enter a valid domain!</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>
                    </Validations>
                    <Span Margin="Margin.IsAuto.OnY">
                        <Tooltip Text="Subscribe (Notifies you by E-mail when the status changes)">
                            <Button Margin="Margin.Is2.FromBottom" Color="Color.Primary" Clicked="Subscribe" Disabled="!domainIsValid || serviceAddIsLoading" Loading="serviceAddIsLoading">Subscribe</Button>
                        </Tooltip>
                    </Span>
                </Row>

                @if (subscibedServices is not null)
                {
                    <h5 class="mt-4">Subscribed sites (@subscibedServices.Count()/@siteSubscribtionsLimit)</h5>

                    if (subscibedServices.Count() == 0)
                    {
                        <Paragraph TextColor="TextColor.White50">
                            You are not subscribed to any sites yet.<br>
                            Use the form above to subscribe to a website and receive notifications when the status of a website changes.
                        </Paragraph>
                    }

                    <Table FullWidth Border="Border.Dark" Class="services-list-table" Responsive>
                        <TableBody>
                            @foreach (ServiceInformation serviceInformation in subscibedServices)
                            {
                                <TableRow>
                                    <TableRowCell Class="align-middle" Style="width:20px;">
                                        <Button Color="Color.Danger" Clicked="()=>Unsubscribe(serviceInformation.ServicePageDomain)">Unsubscribe</Button>
                                    </TableRowCell>
                                    <TableRowCell Class="align-middle" Style="width:5px;">
                                        <StatusCircle Status="serviceInformation.CurrentStatus.Status" />
                                    </TableRowCell>
                                    <TableRowCell Class="align-middle" TextAlignment="TextAlignment.Start">
                                        <Span>
                                            <a href="/status/@serviceInformation.ServicePageDomain.Replace('.', '/')" class="text-white">
                                                <Strong>@serviceInformation.ServicePageDomain</Strong>
                                            </a>
                                        </Span>
                                    </TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                    </Table>
                }

                @if (apiKeys is not null)
                {
                    <h5 class="mt-4">API keys (@apiKeys.Count()/@apiKeysLimit)</h5>

                    if (apiKeys.Count() == 0)
                    {
                        <Paragraph TextColor="TextColor.White50">
                            You don't have any API keys yet.
                        </Paragraph>
                    }

                    <Table FullWidth Border="Border.Dark" Class="services-list-table" Responsive>
                        <TableBody>
                            @foreach (ApiKey apiKey in apiKeys)
                            {
                                <TableRow>
                                    <TableRowCell Class="align-middle" Style="width:20px;">
                                        <Button Clicked="()=>RemoveApiKey(apiKey)" Width="Width.Is100" Color="Color.Danger">Remove</Button>
                                    </TableRowCell>
                                    <TableRowCell Class="align-middle" Style="width:5px;">
                                        <Tooltip Text="Copy to clipboard!">
                                            <span class="oi oi-clipboard text-white shadow-none zoom" style="cursor: pointer;" @onclick="()=>ClipboardService.WriteTextAsync(apiKey.Key)" aria-hidden="true" />
                                        </Tooltip>
                                    </TableRowCell>
                                    <TableRowCell Class="align-middle" TextAlignment="TextAlignment.Start">
                                        <Span TextColor="TextColor.White">
                                            <Strong>@apiKey.Key[0..10]...</Strong>
                                        </Span>
                                    </TableRowCell>
                                </TableRow>
                            }

                            <TableRow>
                                <TableRowCell Class="align-middle" Style="width:20px;">
                                    <Button Disabled="apiKeys?.Count() >= apiKeysLimit" Clicked="GenerateApiKey" Color="Color.Primary">Generate</Button>
                                </TableRowCell>
                                <TableRowCell />
                                <TableRowCell />
                            </TableRow>
                        </TableBody>
                    </Table>
                }
            </Div>

            <Button Margin="Margin.Is5.FromTop" Color="Color.Danger" Clicked="DeleteAccount" Size="Size.Small">Delete Account</Button>

        }
    </Authorized>
    <NotAuthorized>
        Sorry, you don't have the required permissions to see this.
    </NotAuthorized>
</Protected>

@code {
    private Validation validation = null!;

    private User? user;
    private IEnumerable<ServiceInformation>? subscibedServices;
    private IEnumerable<ApiKey>? apiKeys;
    private int siteSubscribtionsLimit;
    private int apiKeysLimit;

    private bool domainIsValid;
    private bool serviceAddIsLoading;
    private bool apiKeyAddIsLoading;

    private string? domainText;

    protected override async Task OnInitializedAsync()
    {
        user = await AuthenticationService.GetUserAsync();
        subscibedServices = (await UserDataService.GetAllSubscribedServicesAsync())?.OrderByDescending(s => s.CurrentStatus.Status);
        siteSubscribtionsLimit = await UserDataService.GetSiteSubscribtionsLimitAsync();
        apiKeys = await UserDataService.GetApiKeysAsync();
        apiKeysLimit = await UserDataService.GetSiteApiKeysLimitAsync();
    }

    private async Task Subscribe()
    {
        if (domainText is null || !domainIsValid || serviceAddIsLoading)
        {
            return;
        }

        serviceAddIsLoading = true;

        (bool IsSuccess, string? ErrorMessage) result = await UserDataService.SubscribeToServiceAsync(domainText);

        if (result.IsSuccess)
        {
            domainText = string.Empty;
            validation.NotifyValidationStatusChanged(ValidationStatus.Error);
        }
        else
        {
            validation.NotifyValidationStatusChanged(ValidationStatus.Error, new[] { result.ErrorMessage });
        }

        serviceAddIsLoading = false;
    }

    private async Task Unsubscribe(string domain)
    {
        await UserDataService.UnsubscribeFromServiceAsync(domain);
    }

    private async Task GenerateApiKey()
    {
        if(apiKeyAddIsLoading)
        {
            return;
        }

        apiKeyAddIsLoading = true;
        await UserDataService.GenerateNewApiKeyAsync();
        apiKeyAddIsLoading = false;
    }

    private async Task RemoveApiKey(ApiKey apiKey)
    {
        await UserDataService.RemoveApiKeyAsync(apiKey);
    }

    private async Task DeleteAccount()
    {
        if (await MessageService.Confirm("Do you really want to delete your account?<br>All of your data will be permanently deleted!", "Account Deletion!", (o) => { o.CancelButtonText = "No, I'll give you another chance!"; o.ConfirmButtonColor = Color.Danger; }))
        {
            await AuthenticationService.DeleteRequestUserAsync();
            await MessageService.Error("We have sent you an account deletion E-mail!<br>You have been automatically logged out.", "Account Deletion!");
        }
    }

    private void ValidationStatusChanged(ValidationsStatusChangedEventArgs e)
    {
        domainIsValid = e.Status != ValidationStatus.Error;
    }

    public async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await Subscribe();
        }
    }
}
