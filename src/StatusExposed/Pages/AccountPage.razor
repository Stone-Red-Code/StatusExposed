@page "/account"
@using StatusExposed.Models
@using StatusExposed.Services
@using StatusExposed.Utilities

@inject IAuthenticationService AuthenticationService
@inject IUserDataService UserDataService

<Protected>
    <Authorized>
        @if (user is not null)
        {
            <h3 class="mb-5">Hello, @user.Email</h3>

            <Div Display="Display.Flex" Flex="Flex.Wrap.JustifyContent.Center">

                <Div>
                    <Row Margin="Margin.Is1.FromStart">
                        <Validations StatusChanged="ValidationStatusChanged">
                            <Validation Validator="CustomValidators.ValidateDomain">
                                <Field>
                                    <FieldLabel>Subscribe to new service</FieldLabel>
                                    <TextEdit Placeholder="example.com" Width="Width.Is100" @bind-Text="domainText" KeyDown="Enter" Disabled="isLoading" Autofocus="true">
                                        <Feedback>
                                            <ValidationNone>Enter a domain.</ValidationNone>
                                            <ValidationSuccess>Domain is valid.</ValidationSuccess>
                                            <ValidationError>Enter a valid domain!</ValidationError>
                                        </Feedback>
                                    </TextEdit>
                                </Field>
                            </Validation>
                        </Validations>
                        <Span Margin="Margin.IsAuto.OnY"><Button Margin="Margin.Is2.FromBottom.Is3.OnX.FromStart" Color="Color.Primary" Clicked="Subscribe" Disabled="!isValid || isLoading" Loading="isLoading">Subscribe</Button></Span>
                    </Row>

                    @if (subscibedServices is not null)
                    {
                        <p>Subscribed Services</p>

                        <div class="services-list-table">
                            <Table Border="Border.Dark">
                                <TableBody>
                                    @foreach (ServiceInformation statusInformation in subscibedServices)
                                    {
                                        <TableRow>
                                            <TableRowCell Style="width:20px;">
                                                <Button Color="Color.Danger" Clicked="()=>Unsubscribe(statusInformation.ServicePageDomain)">Unsubscribe</Button>
                                            </TableRowCell>
                                            <TableRowCell TextAlignment="TextAlignment.Start">
                                                <Span><Strong TextColor="TextColor.White">@statusInformation.ServicePageDomain</Strong></Span>
                                            </TableRowCell>
                                        </TableRow>
                                    }
                                </TableBody>
                            </Table>
                        </div>
                    }
                </Div>

                <Div Flex="Flex.Grow.Is1" Margin="Margin.Is4">
                    <Card Class="default-background" Width="Width.Is100">
                        <CardHeader>
                            <p>Your permissions</p>
                        </CardHeader>
                        <CardBody>
                            <ul>
                                @foreach (Permission permission in user.Permissions)
                                {
                                    <li>@permission.Name</li>
                                }
                            </ul>
                        </CardBody>
                    </Card>
                </Div>
            </Div>

        }
    </Authorized>
    <NotAuthorized>
        Sorry, you don't have the required permissions to see this.
    </NotAuthorized>
</Protected>

@code {

    private User? user;
    private IEnumerable<ServiceInformation>? subscibedServices;

    protected override async Task OnInitializedAsync()
    {
        user = await AuthenticationService.GetUserAsync();
        subscibedServices = await UserDataService.GetAllSubscribedServicesAsync();
    }

    private bool isValid;
    private bool isLoading;

    private string? domainText;

    private async Task Subscribe()
    {
        if (domainText is null || !isValid)
        {
            return;
        }

        isLoading = true;
        await UserDataService.SubscribeToServiceAsync(domainText);
        isLoading = false;
    }

    private async Task Unsubscribe(string domain)
    {
        await UserDataService.UnsubscribeFromServiceAsync(domain);
    }

    private void ValidationStatusChanged(ValidationsStatusChangedEventArgs e)
    {
        isValid = e.Status != ValidationStatus.Error;
    }

    public async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await Subscribe();
        }
    }
}
