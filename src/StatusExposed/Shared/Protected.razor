@using StatusExposed.Models
@using StatusExposed.Services

@inject Services.IAuthorizationService AuthorizationService

@if (isAuthorized)
{
    @Authorized
}
else if (!loaded && UseLoadingScreen)
{
    @Loading
}
else if (loaded)
{
    @NotAuthorized
}

@code {
    [Parameter]
    public RenderFragment? Authorized { get; set; }

    [Parameter]
    public RenderFragment? NotAuthorized { get; set; }

    [Parameter]
    public RenderFragment? Loading { get; set; }

    [Parameter]
    public string? RequiredPermissions { get; set; }

    [Parameter]
    public bool UseLoadingScreen { get; set; }

    private bool isAuthorized;
    private bool loaded;

    protected override async Task OnParametersSetAsync()
    {
        isAuthorized = await AuthorizationService.IsAuthorized(RequiredPermissions);
        StateHasChanged();
        loaded = true;
    }
}
