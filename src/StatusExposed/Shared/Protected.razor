@using StatusExposed.Models
@using StatusExposed.Services

@inject IAuthenticationService AuthenticationService

@if (isAuthorized)
{
    @Authorized
}
else if(!loaded && UseLoadingScreen)
{
    @Loading
}
else if (loaded)
{
    @NotAuthorized
}



@code {
    [Parameter]
    public RenderFragment? Authorized { get; set; }

    [Parameter]
    public RenderFragment? NotAuthorized { get; set; }

    [Parameter]
    public RenderFragment? Loading { get; set; }

    [Parameter]
    public Permission[]? RequiredPermissions { get; set; }

    [Parameter]
    public bool UseLoadingScreen { get; set; }

    private bool isAuthorized;
    private bool loaded;

    protected override async Task OnInitializedAsync()
    {
        await Check();
        loaded = true;
    }

    private async Task Check()
    {
        User? user = await AuthenticationService.GetUserAsync();

        if (user is null)
        {
            isAuthorized = false;
            StateHasChanged();
            return;
        }

        if (RequiredPermissions is null || RequiredPermissions.Length == 0)
        {
            isAuthorized = true;
            StateHasChanged();
            return;
        }

        foreach (Permission permission in RequiredPermissions)
        {
            if (user.HasPermission(permission))
            {
                isAuthorized = false;
                return;
            }
        }

        StateHasChanged();
        isAuthorized = true;
    }
}
