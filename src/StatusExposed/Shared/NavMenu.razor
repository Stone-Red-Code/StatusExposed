@using System.Diagnostics
@inject IJSRuntime JsRuntime

<div class="top-row ps-3 navbar-dark @navMenuCssClass" style="@navMenuWidth">
    <div class="container-fluid">
        <a class="navbar-brand" style="cursor:pointer" @onclick="ToggleNavMenu">StatusExposed</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@navMenuCssDisplayClass">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="add">
                <span class="oi oi-plus" aria-hidden="true"></span> Add site
            </NavLink>
        </div>
        <!-- Use when implementing management system
            <div class="nav-item px-3">
            <NavLink class="nav-link" href="admin">
                <span class="oi oi-shield" aria-hidden="true"></span> Admin
            </NavLink>
        </div>
        -->
    </nav>
</div>

<div class="m-1 text-white-50" style="position: fixed; bottom: 0; left: 0; z-index: 999">
    <a href="https://github.com/Stone-Red-Code/StatusExposed/blob/main/LICENCE" class="text-white-50">©@DateTime.UtcNow.Year</a> - <a href="legal" class="text-white-50">Legal Notice</a>
</div>

@code {
    private bool collapseNavMenuMobile = true;
    private bool collapseNavMenuDesktop = false;
    private bool isMobile = false;

    private string? navMenuCssDisplayClass => collapseNavMenuDesktop || (collapseNavMenuMobile && isMobile) ? "d-none" : null;
    private string? navMenuCssClass => collapseNavMenuDesktop ? null : "navbar";
    private string? navMenuWidth
    {

        get
        {
            if (isMobile)
            {
                return null;
            }

            if (collapseNavMenuDesktop)
            {
                return "width:0px";
            }
            else
            {
                return "width:250px";
            }
        }
    }

    private void ToggleNavMenu()
    {  
        if (isMobile)
        {
            collapseNavMenuDesktop = false;
            collapseNavMenuMobile = !collapseNavMenuMobile;
        }
        else
        {
            collapseNavMenuDesktop = !collapseNavMenuDesktop;
            collapseNavMenuMobile = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        WindowDimension dimension = await JsRuntime.InvokeAsync<WindowDimension>("getWindowDimensions");
        // Check if mobile device
        isMobile = dimension.Width <= 700;
        StateHasChanged();
    }

    public class WindowDimension
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }
}
